from utils import bytesToInt, intToBytes, addXor
import os


class AES():
    def __init__(self):
        self.name = 'AES'        
        # S盒
        self.S = (
            0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
            0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
            0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
            0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
            0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
            0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
            0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
            0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
            0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
            0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
            0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
            0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
            0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
            0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
            0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
            0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
        )
        # 逆S盒
        self.invS = (
            0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
            0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
            0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
            0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
            0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
            0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
            0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
            0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
            0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
            0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
            0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
            0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
            0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
            0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
            0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
            0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
        )

        # 列混淆矩阵 (list(byte int): len=16)
        self.col_mix_matrix = self.generate_col_matrix()
        self.inv_col_mix_matrix = self.generate_inv_col_matrix()
        self.mx = int('00011011',base=2)

        # 生成轮秘钥 (list(byte int): len=44*4)
        self.key = list(os.urandom(16))
        #self.key = [108, 113, 55, 71, 231, 234, 112, 193, 180, 204, 225, 6, 40, 134, 195, 78]
        self.Rcon = (
            0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
            0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A,
            0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A,
            0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39,
        )
        self.roundkey = self.generate_roundkey()
        

        # 分组长度
        self.packet_length = 16

    
    def encrypt(self, X):
        '''
            X: str(text) -> encode(), bytes -> encrypt
            return: str(bytes.hex())
        '''
        res = ''
        _x = list(X.encode())
        encry_times = len(_x)>>4 # //16, self.packet_length = 16, 分组长度
        # 对最后剩余的分组进行扩展
        if len(_x) % 16 !=0:
            _x += [0x00]*(16-len(_x)%16)
            encry_times += 1

        for _ in range(encry_times):
            # 取16个字节
            _xi = _x[_<<4 : (_+1)<<4]  
            # 轮秘钥加
            _xi = addXor(_xi, self.roundkey[:16])
            
            # 9轮加密
            for i in range(1,10):
                # 字节代替
                _xi = self.subWord(_xi)
                # 行移位
                for _rnd in range(1,4):
                    _xi[_rnd*4:(_rnd+1)*4] = self.row_shift(_xi[_rnd*4:(_rnd+1)*4], _rnd)
                # 列混淆
                _xi = self.col_mix(_xi, self.col_mix_matrix)
                # 轮密钥加
                _xi = addXor(_xi, self.roundkey[i*16:(i+1)*16])

            # 第10轮加密
            # 字节代替
            _xi = self.subWord(_xi)
            # 行移位
            for _rnd in range(1,4):
                _xi[_rnd*4:(_rnd+1)*4] = self.row_shift(_xi[_rnd*4:(_rnd+1)*4], _rnd)
            
            # 轮密钥加
            _xi = addXor(_xi, self.roundkey[160:])

            # 添加密文到res中
            res += bytes(_xi).hex()

        return res



    def decrypt(self, X):
        '''
            X: str(hex) -> bytes().fromhex(), bytes -> decrypt -> decode
            return: str(text)
        '''
        res = b''
        _x = bytes().fromhex(X)
        decry_times = len(_x)>>4  # 分组组数
        for _ in range(decry_times):
            # 取16个字节
            _xi = _x[_<<4 : (_+1)<<4]  
            # 轮秘钥加
            _xi = addXor(_xi, self.roundkey[160:])
            
            # 9轮解密
            for i in range(9,0,-1):
                # 逆向行移位
                for _rnd in range(1,4):
                    _xi[_rnd*4:(_rnd+1)*4] = self.row_shift(_xi[_rnd*4:(_rnd+1)*4], -_rnd)

                # 逆向字节代替
                _xi = self.invSubWord(_xi)
                # 轮密钥加
                _xi = addXor(_xi, self.roundkey[i*16:(i+1)*16])

                # 逆向列混淆
                _xi = self.col_mix(_xi, self.inv_col_mix_matrix)
                

            # 第10轮解密
            # 逆向行移位
            for _rnd in range(1,4):
                _xi[_rnd*4:(_rnd+1)*4] = self.row_shift(_xi[_rnd*4:(_rnd+1)*4], -_rnd)

            # 逆向字节代替
            _xi = self.invSubWord(_xi)
            
            # 轮密钥加
            _xi = addXor(_xi, self.roundkey[:16])

            # 添加明文bytes到res中
            res += bytes(_xi)

        return res.decode()



    def subWord(self, X):
        '''
            X: list(byte, int)
            return: 根据S盒输出X对应的元素
        '''
        return [self.S[x] for x in X]

    
    def invSubWord(self, X):
        '''
            X: list(byte, int)
            return: 根据逆S盒输出X对应的元素
        '''
        return [self.invS[x] for x in X]

    def row_shift(self, X, shiftCnt):
        '''
        行移位
            X: bytes
            shiftCnt: int, 1->左移一个字节，-1 -> 右移一个字节
            return: list(byte int)
        '''
        shiftCnt %= len(X)
        return X[shiftCnt:] + X[:shiftCnt]


    def col_mix(self, X, mix_mat):
        '''
        列混淆
            X: bytes(len=16)
        '''
        res = []
        # 矩阵乘法
        for i in range(4):
            for j in range(4):
                kx = 0
                for k in range(4):
                    kx ^= self.mul_byGF(mix_mat[i*4+k], X[k*4+j])
                res.append(kx)
        return res


    def mul_byGF(self, x, y):
        '''
            x,y: 一个字节, 在GF(2^8)上相乘，m(x) = 00011011
        '''
        res = 0
        if x&1:
            res = y
        x>>=1
        while x>0:
            if y & (1<<7):
                y = ((y<<1)&255) ^ self.mx
            else:
                y = (y<<1)&255
            if x&1:
                if y & (1<<7):
                    res ^= y
                else:
                    res ^= y  
            x>>=1
        return res


    def generate_col_matrix(self):
        '''
            生成一个列混淆矩阵
        '''
        rowlist = [0x02, 0x03, 0x01, 0x01]
        return self.shift_generate_matrix(rowlist)

    
    def generate_inv_col_matrix(self):
        '''
            生成一个逆的列混淆矩阵
        '''
        rowlist = [0x0E, 0x0B, 0x0D, 0x09]
        return self.shift_generate_matrix(rowlist)

    def shift_generate_matrix(self, X):
        '''
            生成列混淆矩阵专用
        '''
        res = X[:]
        for i in range(1,4):
            res += self.row_shift(X, -i)
        return res


    def generate_roundkey(self):
        '''
            key: list(int byte), len=16
            return: roundkey, list(int byte), len = 44*4
        '''
        wres = self.key[:]
        for i in range(4,44):
            temp = wres[-4:]
            if i%4 == 0:
                # 左移加轮常量
                temp = self.subWord(self.row_shift(temp, 1))
                temp[0] ^= self.Rcon[i//4]
            wres += addXor(temp, wres[(i-4)*4:(i-3)*4])
        return wres



if __name__ == '__main__':
    aesx = AES()
    message = 'huangdrhuafdsafngdrhu'
    my = aesx.encrypt(message)
    mx = aesx.decrypt(my)
    print(mx)
